/*
 * Export View to Markdown
 * 
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 * 
 * Markdown - https://www.markdownguide.org/
 * 
 * Version 2: Updated to support Diagram Groups
 * Version 2.1: Add check for Selected View
 * Version 2.2: Change to regex, added date of export
 * Version 2.3: Include notes in documentation
 * Version 3: Updated to include Relationships
 * Version 3.1: Include name and description
 * Version 3.2: Support repeated elements
 * (c) 2018 Steven Mileham
 *
 * Version 3.3: fix table formatting + loop on all views
 *              Put the documentation text just after the paragraph title
 *
 */

console.show();
console.clear()

var showProperty = false;
var showObjectType = false;
var showToC = true;
var debug = false ;

load(__DIR__+"/lib/_fmt_lib_confluence.ajs")
load(__DIR__+'/lib/_util.ajs')
var exportFolder = "doc\\";

/* 
 * Main Program
 * ============
 * 
 * Create a README.wi file with the model purpose and the table of content for the views
 *
 * Then, create a .wi file for each View
 *
 */


var theTOC="";
var theDocument="";

console.log("Export to Confluence - " + model.name);
var defaultFileName = "README.wi"; // Default file name

exportFile = model.getPath() //getModelFileName(model);
relativeName = exportFile.split("\\");
pathName = exportFile.substring(0, exportFile.length - relativeName[relativeName.length-1].length);
// in case the Archimate model is under git control, the model file is actually in the .git folder that we should skip
var expr = /.git/
if (expr.test(pathName)) {
    pathName = pathName.substring(0, pathName.length-5);
}
if (exportFile == null) {
    exportFile = window.promptSaveFile({ title: "Export to Markdown", filterExtensions: [ "*.wi" ], fileName: defaultFileName } );
} else {
    mkdir(pathName + exportFolder ); // create the export folder unless it already exists
    exportFile = pathName + exportFolder + defaultFileName;
}
console.log(exportFile)

if (exportFile != null) {
    // Get the pathname of the README.wi file
    relativeName = exportFile.split("\\");
    pathName = exportFile.substring(0, exportFile.length - relativeName[relativeName.length-1].length);  

    // Create here the code to export the README.wi file with model purpose 
    var theDocument = "h2. " + model.name + " \n";
    if (model.purpose != null) {
        theDocument += "h1. Model Purpose \n";
        model.purpose!=""?theDocument+="\n"+model.purpose+"\n":true;
    }
    theDocument += "h1. View index \n";
    $("view").each(function(theView) {
        if (theView){
            var viewFile = model.name + "-" + theView.name + ".wi";
            viewFile = viewFile.replaceAll(" ","%20");
            theDocument+="* ["+theView.name+"|#"+ viewFile +"]\n";
        }
    });
    $.fs.writeFile(exportFile, theDocument);


    // Create a wiki confluence document for each view

    $("view").each(function(theView) {
    
        if (theView) {

            setZorderProperty(theView);
            theDocument = "";
            theTOC = "* "+generateLink("Introduction") + "\n";

            exportFile = theView.name ? model.name + "-" + theView.name + ".wi" : "Exported View.wi"; // Default file name
			// add here some code to suppress non allowed character from a normal file name
			exportFile = exportFile.replace(/[&\/\\#,+()$~%'":*?<>{}]/g,'_');
								   
            exportFile = pathName + exportFile
            console.log("Exporting to " + exportFile);

            if(exportFile != null) {
			
                imageURL = exportFile.substring(0,exportFile.length-3)+".png";
                relativeURL = imageURL.split("\\");

                theDocument+="h1. "+theView.name+"\n";
				if (showToC) {
					toc(0,theView);
					theDocument+="\n"+theTOC+"\n";
				}

                theDocument+="\nh2. {color:blue}*Introduction*{color}\n";
                theView.documentation!=""?theDocument+="\n"+theView.documentation+"\n":true;

                theDocument+="\n!"+relativeURL[relativeURL.length-1] + "|width=1000px! \n";


                // Notes with no relationships
                $(selection).find().not("element").not("relationship").each(function(c){
                    if (c.text) {
                        if ($(c).rels().length==0) {
                            theDocument+="\n> "+escapeMD(c.text).replaceAll("\n","\n> ")+"\n";
                        }
                    };
                })

                nestedDocumentation(0, theView);

                theDocument+="\n\n_Generated by Archimate tool script: "+ new Date().toLocaleString()+"_\n";
                
                try {
                    console.log("Writing to: " + exportFile);
                    $.fs.writeFile(exportFile, theDocument);
                    var bytes = $.model.renderViewAsBase64(theView, "PNG", {scale: 2, margin: 10});
                    $.fs.writeFile(exportFile.substring(0,exportFile.length-3) +".png", bytes, "BASE64");
                }
                catch(e) {
                    console.log('Error: '+e)
                }
                console.log("> View export done\n\n\n");
            }
            else {
                console.log("> View export skipped");
            }
        }
        else {
            console.log("> Please Select a View");
        }
    });

} else {
    console.log("> Export cancelled");
}
