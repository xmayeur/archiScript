/*
 *  Archi Script - Utilities
 */
 
// ----------------------------------------------------------------------------
// return collection of elements with distinct properties 'prop' and 

function distinct(myObject, prop) {
    var result = [];
    var Map = Java.type('java.util.HashMap');
    var map = new Map();

    for each (e in myObject) {
        if (!map.containsKey(e[prop])) {
            map.put(e[prop], true);
            result.push(e);
        }
    }
    return result;
}

// ----------------------------------------------------------------------------
// Sort of collection based on specific property name
function sortObjectsByProperty(myObjects, prop, direction) {
    var dir = (direction === 'asc') ? 1 : -1;
    myObjects.sort(function(a,b){
        return compare(a,b,prop) * dir;
    })
};

function compare(a,b,prop){
    if(a[prop] < b[prop])
        return -1;
    else if(a[prop] > b[prop])
        return 1;
    return 0;
}

//-----------------------------------------------------------------------------
// Sort a collection based on specific property name/value pair


function SortObjectsByPropertyValue(myObjects, propName, propValue, direction) {
    var dir = (direction === 'asc') ? 1 : -1;
    myObjects.sort(function(a,b){
        return pComparev(a,b,propName, propValue) * dir;
    })
};

function pComparev(a,b,propName, propValue){
	
    if(a[propName](propValue) < b[propName](propValue))
        return -1;
    else if(a[propName](propValue) > b[propName](propValue))
        return 1;
    return 0;
}

//-----------------------------------------------------------------------------
// Sort a collection based on specific property name/value pair

function pCompare(a,b,prop){
	var aa = parseInt(a.prop(prop));
	var bb = parseInt(b.prop(prop));
    if(aa < bb)
        return -1;
    else if(aa > bb)
        return 1;
    return 0;
}

function pSortObjects(myObjects, prop, direction) {
    var dir = (direction === 'asc') ? 1 : -1;
    myObjects.sort(function(a,b){
        return pCompare(a,b,prop) * dir;
    })
};

//-----------------------------------------------------------------------------
// Read a file as character or bytes
function readFile(filePath, mode) {
	
	mode = mode || 'char';
	
	var FileReader = Java.type("java.io.FileReader");
	var bytes = Java.type('byte[]');
	var fd = new FileReader(filePath);

	var chars ="";

	var data = fd.read();
	while(data != -1) {
		bytes += data
		var theCharacter = String.fromCharCode(data);
		chars+=theCharacter;
		data = fd.read();
	}
	fd.close();
	if (mode === 'char') {
		return chars;
	} else {
		return bytes;
	}
}

// -------------------------------------------------------------------------------------------------------------------

function log(msg, isAlert)
{
    if (debug) { console.log(msg); }
    if (!!isAlert)
    {
        window.alert(msg);
    }
}

// https://www.geeksforgeeks.org/file-class-in-java/
function mkdir(folderPath) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(folderPath);
    if (!fd.exists()) {
        return fd.mkdir();
    }
}

function rename(source, dest) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(source);
    if (fd.exists()) {
        fd.renameTo(dest);
    }
}

function deleteFile(filePath) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(filePath);
    if (fd.exists()) {
        fd.delete();
    }
}


function fileExists(filePath) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(filePath);
    return fd.exists();
}

function execWait(cmd, args) {
	var rt = Java.type("java.lang.Runtime").getRuntime();
	var proc = Java.type("java.lang.Process");
	if (!!args) {
		proc = rt.exec([cmd, args]);
	} else {
		proc = rt.exec(cmd);
	}
	exitval = proc.waitFor();
	return exitval;
}