/*
 *  Archi Script - Utilities
 */

// ----------------------------------------------------------------------------
// return collection of elements with distinct properties 'prop' and 

function distinct(myObject, prop) {
    var result = [];
    var Map = Java.type('java.util.HashMap');
    var map = new Map();

    for each(e in myObject) {
        if (!map.containsKey(e[prop])) {
            map.put(e[prop], true);
            result.push(e);
        }
    }
    return result;
}

// ----------------------------------------------------------------------------
// Sort of collection based on specific property name
function sortObjectsByProperty(myObjects, prop, direction) {
    var dir = (direction === 'asc') ? 1 : -1;
    myObjects.sort(function (a, b) {
        return compare(a, b, prop) * dir;
    })
}

function compare(a, b, prop) {
    if (a[prop] < b[prop])
        return -1;
    else if (a[prop] > b[prop])
        return 1;
    return 0;
}

//-----------------------------------------------------------------------------
// Sort a collection based on specific property name/value pair


function SortObjectsByPropertyValue(myObjects, propName, propValue, direction) {
    var dir = (direction === 'asc') ? 1 : -1;
    myObjects.sort(function (a, b) {
        return pComparev(a, b, propName, propValue) * dir;
    })
}

function pComparev(a, b, propName, propValue) {

    if (a[propName](propValue) < b[propName](propValue))
        return -1;
    else if (a[propName](propValue) > b[propName](propValue))
        return 1;
    return 0;
}

//-----------------------------------------------------------------------------
// Sort a collection based on specific property name/value pair

function pCompare(a, b, prop) {
    var aa = parseInt(a.prop(prop));
    var bb = parseInt(b.prop(prop));
    if (aa < bb)
        return -1;
    else if (aa > bb)
        return 1;
    return 0;
}

function pSortObjects(myObjects, prop, direction) {
    var dir = (direction === 'asc') ? 1 : -1;
    myObjects.sort(function (a, b) {
        return pCompare(a, b, prop) * dir;
    })
}

//-----------------------------------------------------------------------------
// Read a file as character or bytes
function readFile(filePath, mode) {

    mode = mode || 'char';

    var FileReader = Java.type("java.io.FileReader");
    var bytes = Java.type('byte[]');
    var fd = new FileReader(filePath);

    var chars = "";

    var data = fd.read();
    while (data != -1) {
        bytes += data
        var theCharacter = String.fromCharCode(data);
        chars += theCharacter;
        data = fd.read();
    }
    fd.close();
    if (mode === 'char') {
        return chars;
    } else {
        return bytes;
    }
}

// -------------------------------------------------------------------------------------------------------------------

function log(msg, isAlert) {
    if (debug) {
        console.log(msg);
    }
    if (!!isAlert) {
        window.alert(msg);
    }
}

// https://www.geeksforgeeks.org/file-class-in-java/
function mkdir(folderPath) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(folderPath);
    if (!fd.exists()) {
        return fd.mkdir();
    }
}

function rename(source, dest) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(source);
    if (fd.exists()) {
        fd.renameTo(dest);
    }
}

function deleteFile(filePath) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(filePath);
    if (fd.exists()) {
        fd.delete();
    }
}


function fileExists(filePath) {
    var FileHandler = Java.type("java.io.File");
    var fd = new FileHandler(filePath);
    return fd.exists();
}

function execWait(cmd, args) {
    var rt = Java.type("java.lang.Runtime").getRuntime();
    var proc = Java.type("java.lang.Process");
    if (!!args) {
        proc = rt.exec([cmd, args]);
    } else {
        proc = rt.exec(cmd);
    }
    exitval = proc.waitFor();
    return exitval;
}

// concept type conversion
function convert(selection, convertToType) {
    var relaxed = window.confirm('By default, selected concepts are converted, and relationships involving them that would no more be valid are converted to associations. Click Ok for this behavior or Cancel if you want a "strict" mode where relationships are not changed.');

    $(selection).each(function (o) {
        console.log(o)
        $(concept(o)).outRels().each(function (r) {
            if (!$.model.isAllowedRelationship(r.type, convertToType, r.target.type)) {
                checkAndConvertRelationship(r, relaxed);
            }
        });
        $(concept(o)).inRels().each(function (r) {
            if (!$.model.isAllowedRelationship(r.type, r.source.type, convertToType)) {
                checkAndConvertRelationship(r, relaxed);
            }
        });
        concept(o).concept.type = convertToType;
    });
}

function checkAndConvertRelationship(r, relaxed) {
    if (relaxed) {
        r.documentation = 'This relationship has been converted from "' + r.type.replace(/-relationship$/, '') + '" to "association"\n' + r.documentation;
        r.type = "association-relationship";
    } else {
        window.alert('Relationship "' + r.name + '" from "' + r.source.name + '" to "' + r.target.name + '" will no more be valid after convertion and "strict" mode is on. Convertion aborted.');
        exit();
    }
}

function concept(o) {
    return o.concept ? o.concept : o;
}

// ---------------------------------------------------------------------------------------------------
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   {number}  h       The hue
 * @param   {number}  s       The saturation
 * @param   {number}  l       The lightness
 * @return  {Array}           The RGB representation
 */
function hslToRgb(h, s, l) {
    var r, g, b;

    if (s == 0) {
        r = g = b = l; // achromatic
    } else {
        var hue2rgb = function hue2rgb(p, q, t) {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        }

        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }

    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

// -----------------------------------------------------------------------
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   {number}  r       The red color value
 * @param   {number}  g       The green color value
 * @param   {number}  b       The blue color value
 * @return  {Array}           The HSL representation
 */
function rgbToHsl(r, g, b) {
    r /= 255, g /= 255, b /= 255;
    var max = Math.max(r, g, b), min = Math.min(r, g, b);
    var h, s, l = (max + min) / 2;

    if (max == min) {
        h = s = 0; // achromatic
    } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }

    return [h, s, l];
}

// ----------------------------------------------------------------

function hexToHSL(H) {
    // Convert hex to RGB first
    let r = 0, g = 0, b = 0;
    if (H.length == 4) {
        r = "0x" + H[1] + H[1];
        g = "0x" + H[2] + H[2];
        b = "0x" + H[3] + H[3];
    } else if (H.length == 7) {
        r = "0x" + H[1] + H[2];
        g = "0x" + H[3] + H[4];
        b = "0x" + H[5] + H[6];
    }
    // Then to HSL
    r /= 255;
    g /= 255;
    b /= 255;
    let cmin = Math.min(r, g, b),
        cmax = Math.max(r, g, b),
        delta = cmax - cmin,
        h = 0,
        s = 0,
        l = 0;

    if (delta == 0)
        h = 0;
    else if (cmax == r)
        h = ((g - b) / delta) % 6;
    else if (cmax == g)
        h = (b - r) / delta + 2;
    else
        h = (r - g) / delta + 4;

    h = Math.round(h * 60);

    if (h < 0)
        h += 360;

    l = (cmax + cmin) / 2;
    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
    s = +(s * 100).toFixed(1);
    l = +(l * 100).toFixed(1);

    // return "hsl(" + h + "," + s + "%," + l + "%)";
    return [h, s, l];
}

// ------------------------------------------------------------

function HSLToHex(h, s, l) {
    s /= 100;
    l /= 100;

    let c = (1 - Math.abs(2 * l - 1)) * s,
        x = c * (1 - Math.abs((h / 60) % 2 - 1)),
        m = l - c / 2,
        r = 0,
        g = 0,
        b = 0;

    if (0 <= h && h < 60) {
        r = c;
        g = x;
        b = 0;
    } else if (60 <= h && h < 120) {
        r = x;
        g = c;
        b = 0;
    } else if (120 <= h && h < 180) {
        r = 0;
        g = c;
        b = x;
    } else if (180 <= h && h < 240) {
        r = 0;
        g = x;
        b = c;
    } else if (240 <= h && h < 300) {
        r = x;
        g = 0;
        b = c;
    } else if (300 <= h && h < 360) {
        r = c;
        g = 0;
        b = x;
    }
    // Having obtained RGB, convert channels to hex
    r = Math.round((r + m) * 255).toString(16);
    g = Math.round((g + m) * 255).toString(16);
    b = Math.round((b + m) * 255).toString(16);

    // Prepend 0s, if necessary
    if (r.length == 1)
        r = "0" + r;
    if (g.length == 1)
        g = "0" + g;
    if (b.length == 1)
        b = "0" + b;

    return "#" + r + g + b;
}

//--------------------------------------------------------

function changeColorLum(e, deltaLum) {
    c = e.fillColor
    if (c != null) {
        hsl = hexToHSL(c)
        h = hsl[0]
        s = hsl[1]
        l = hsl[2]
        l += deltaLum

        e.fillColor = (HSLToHex(h, s, l))
    }
}

// ----------------------
function darken(e) {

    if (e.type.indexOf('relationship') >= 0) {
        e.prop('color', e.lineColor)
        e.lineColor = "#FF0000"
    } else {
        forceDefaultColor(e, true)
        e.prop('color', e.fillColor)
        changeColorLum(e, -15)
    }
}


function lighten(e) {

    if (e.type.indexOf('relationship') >= 0) {
        e.prop('color', e.lineColor)
        e.lineColor = "#0000FF"
    } else {
        forceDefaultColor(e, true)
        e.prop('color', e.fillColor)
        changeColorLum(e, +15)
    }
}

function forceDefaultColor(e, onlyIfNull = false) {

    if (onlyIfNull && e.fillColor != null) {
        return
    }
    let strategy = '#F5DEAA'
    let business = "#FFFFB5"
    let application = "#B5FFFF"
    let technology = "#C9E7B7"
    let migration = "#FFE0E0"
    let motivation = "#CCCCFF"
    let relation = "#0000FF"
    console.log(e.type)
    if (e.type.indexOf('business') >= 0) {
        e.fillColor = business
    } else if (e.type.indexOf('contract') >= 0) {
        e.fillColor = business
    } else if (e.type.indexOf('representation') >= 0) {
        e.fillColor = business
    } else if (e.type.indexOf('product') >= 0) {
        e.fillColor = business
    } else if (e.type.indexOf('application') >= 0) {
        e.fillColor = application
    } else if (e.type.indexOf('data-object') >= 0) {
        e.fillColor = application
    } else if (e.type.indexOf('technology') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('node') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('device') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('system') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('path') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('network') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('artifact') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('equipment') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('facility') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('material') >= 0) {
        e.fillColor = technology
    } else if (e.type.indexOf('relationship') >= 0) {
        e.lineColor = relation
    } else if (e.type.indexOf('resource') >= 0) {
        e.fillColor = strategy
    } else if (e.type.indexOf('capability') >= 0) {
        e.fillColor = strategy
    } else if (e.type.indexOf('value-stream') >= 0) {
        e.fillColor = strategy
    } else if (e.type.indexOf('course-of-action') >= 0) {
        e.fillColor = strategy
    }

}

function setDefaultColor(e) {
    if (e.prop('color') !== '') {
        if (e.type.indexOf('relationship') >= 0) {
            e.lineColor = e.prop('color')
        } else {
            e.fillColor = e.prop('color')
        }
        e.removeProp('color')
    } else {
        e.fillColor = null
        e.lineColor = null
    }

}
