
/*
 * Ortho relationships
 */
console.clear();

// require some libraries
load(__DIR__ + '/lib/_util.ajs');
load(__DIR__ + "/lib/_fmt_lib.ajs");
// xml = readFile('C:\\Users\\XY56RE\\PycharmProjects\\archiScripts\\examples\\AppDepPat.xml')
//console.log(o)
console.show();
//console.clear();
debug = true;
var incrY = -10;
var incrX = -10;

if ($(selection) === undefined){
       $('*').outRels().forEach(function (o) {
        ortho(o);
    });

} else {

    $(selection).filter('element').forEach(function (e) {
        // console.log(e.name)
        $(e).outRels().forEach(function (o) {
            ortho(o);
        });

    });

    $(selection).filter("relationship").forEach(function (o) {
        ortho(o);
    });
}


// --------------------------------------------------

function addFirstBendpoint(s, t, dx, dy) {

    let sxm = s.x + s.width;
    let sym = s.y +s.height;
    let txm = t.x + t.width;
    let tym = t.y + t.height;
    let b={};

    if (txm < s.x) {
        b.startX = -dx / 2;
        b.endX = dx / 2;
    } else if (t.x > sxm){
        b.startX = dx/2;
        b.endX = -dx/2;
    }

    if (tym < s.y) {
        b.startY = -dy/2;
        b.endY = dy/2;
    } else if (t.y > sym){
        b.startY = dy/2;
        b.endY = -dy/2;
    }

    return b;
}

// --------------------------------------------------

function setXY(bnd, x, y){
    let xa = Math.abs(x);
    let ya = Math.abs(y);
    let w = bnd.width/2;
    let h = bnd.height/2;
    let xm = (x/xa)*Math.max(xa, w+30);
    let ym = (y/ya)*Math.max (ya, h+30);
    let hw = bnd.height / bnd.width;

    if ((xa > w && ya > h)  ) {
        if (ya / xa > hw) {
            log(1)
            return {x: (x / xa) * (w - 10), y: ym, dir: 0};
        } else {
            log(2)
            return {x: xm, y: (y / ya) * (h - 10), dir: 1};

        }
    } else if (xa < w && ya < h) {
          if (ya / xa > hw) {
            log(5)
              return {x: x, y: ym, dir: 0};

        } else {
            log(6)
            return {x: xm, y: y, dir: 1};
    }
    } else if (xa > w && ya < h){
        log(3+" ya:"+ya+" y:"+y)
        return {x:xm, y:y, dir:1};
    } else if (xa < w && ya > h) {
        log(4+" ya:"+ya+" y:"+y)
        return {x:x, y:ym, dir:0};
    } else {
        log(7)
        return  {x:x, y:y, dir:0}
    }

}

// ---------------------------------------------------
function ortho(o) {
    var view = o.view;
    var rel = o.concept;
    var source = o.source;
    var target = o.target;
    var sb = source.bounds;
    var tb = target.bounds;

    $(source).parents().forEach(function (p) {
        try {
            sb.x += p.bounds.x;
            sb.y += p.bounds.y;
        } catch (e) {
        }
    });

    $(target).parents().forEach(function (p) {
        try {
            tb.x += p.bounds.x;
            tb.y += p.bounds.y;
        } catch (e) {
        }
    });

    sb.cpx = sb.x + (sb.width / 2);
    sb.cpy = sb.y + (sb.height / 2);
    tb.cpx = tb.x + (tb.width / 2);
    tb.cpy = tb.y + (tb.height / 2);

    let dx = tb.cpx - sb.cpx;
    let dy = tb.cpy - sb.cpy;

    var bps = o.getRelativeBendpoints();

    if (bps.length === 0) {
        let b = addFirstBendpoint(sb, tb, dx, dy);

        if ('startX' in b) {
            o.addRelativeBendpoint(b, 0);
            bps = [];
            bps.push(b);
        } else {
            return;
        }
    }

    // force the first bendpoint position
    let bp0 = bps[0];
    let xy = setXY(sb, bp0.startX, bp0.startY);
    bp0.startX = xy.x;
    bp0.endX = bp0.startX - dx;
    bp0.startY = xy.y;
    bp0.endY = bp0.startY - dy;
    o.setRelativeBendpoint(bp0, 0);
    let dir = xy.dir;

    let b = {startX: 0, startY: 0, endX: 0, endY: 0};
    let prev = bp0;
    bps.forEach(function (bp) {
        n = bps.indexOf(bp);
        if (n === 0) {
            b = bp;
        }
        if (n === bps.length - 1) {
            log('>'+bp +' - dy:' + dy + ' - dx:'+dx)
            let xy = setXY(tb, bp.endX, bp.endY);
            log(xy);
            b.startX = (dx-xy.x)* dir + prev.startX * (1 - dir);
            b.endX = -(b.startX - dx);
            b.startY = dir * prev.startY + (dy-xy.y) * (1 - dir);
            b.endY =  (b.startY - dy);
            log(b);
        } else if (n !== 0) {
            b.startX = bp.startX * dir + prev.startX * (1 - dir);
            b.endX = b.startX - dx;
            b.startY = prev.startY * dir + bp.startY * (1 - dir);
            b.endY = b.startY - dy;
        }

        o.setRelativeBendpoint(b, n);

        log(n +' '+ dir +' -b '+ b + ' -prev '+  prev);
        dir = (++dir) % 2;
        prev = b;
    });

}
