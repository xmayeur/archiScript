/*
 * Ortho relationships
 */
console.clear()
console.log("New Archi Script");
// require some libraries
load(__DIR__ + '/lib/_util.ajs')
load(__DIR__ + "/lib/_fmt_lib.ajs")
// xml = readFile('C:\\Users\\XY56RE\\PycharmProjects\\archiScripts\\examples\\AppDepPat.xml')
//console.log(o)
console.show();
//console.clear();

var incrY = -10;
var incrX = -10;

for each(var e
in
$(selection).filter('element')
)
{
    console.log(e.name)
    for each(var o
in
    $(e).outRels()
)
    {
        console.log(o.source, " -> ", o.target)
        var source = o.source;
        var target = o.target;
        sb = source.bounds;
        tb = target.bounds;
        dx = tb.x - sb.x;
        dy = tb.y - sb.y;
        console.log('dx: ', dx, ' dy: ', dy)
        var bps = o.getRelativeBendpoints()
        for each(bp in bps) {
            console.log("bp: ", bp)
        }
    }

}

for each(var o
in
$(selection).filter("relationship")
)
{
    var view = o.view;
    var rel = o.concept;
    var source = o.source;
    var target = o.target;
    sb = source.bounds;
    tb = target.bounds;

    var pp = $(source).parents();
    for each(p in pp) {
        try {
            sb.x += p.bounds.x;
            sb.y += p.bounds.y;
        } catch (e) {
        }
    }

    var pp = $(target).parents();
    for each(p in pp) {
        try {
            tb.x += p.bounds.x;
            tb.y += p.bounds.y;
        } catch (e) {
        }
    }
    dx = tb.x - sb.x;
    dy = tb.y - sb.y;
    console.log('dx: ', dx, ' dy: ', dy)
    var bps = o.getRelativeBendpoints()
    for each(bp in bps) {
        console.log('-bp', bp)
    }
    console.log('\n\n')
    try {
        o.deleteAllBendpoints()
    } catch (e) {
    }
    bp0 = bps[0];
    var dir = 1;
    if (Math.abs(bp0.startX) < sb.height / 2) {
        dir = 0;
    }
    if (Math.abs(bp0.startY) < sb.width / 2) {
        dir = 1;
    }

    let b = {startX: 0, startY: 0, endX: 0, endY: 0};
    let prev = bp0;
    bps.forEach(function (bp) {
        n = bps.indexOf(bp);
        if (n === 0) {
            b = bp;
        } else if (n === bps.length - 1) {
            b.startX = dx * dir + prev.startX * (1 - dir);
            b.endX = b.startX - dx;
            b.startY = dir * prev.startY + dy * (1 - dir);
            b.endY = b.startY - dy;


        } else if (n !== 0) {
            b.startX = bp.startX * dir + prev.startX * (1 - dir);
            b.endX = b.startX - dx;
            b.startY = prev.startY * dir + bp.startY * (1 - dir);
            b.endY = b.startY - dy;


        }
        o.addRelativeBendpoint(b, n);
        console.log(n, dir, ' -bp', bp, ' -prev', prev);
        dir = (++dir) % 2;
        prev = bp;
    });

}
