/*
 *  Flip a 'L'-shape relationships connection point from the top-bottom edges to the left-right edges
 *  or opposite from the selected relationship
 */
console.show();
console.clear();


// if a view is selected, check all objects
$(selection).filter("archimate-diagram-model").forEach(function (v) {
    function orthoRel(e) {
        $(e).outRels().forEach(function (o) {
            orelLFlipShape(o);
        });
        $(e).inRels().forEach(function (o) {
            relLFlipShape(o);
        });
        $(e).children().filter('element').forEach(function (o) {
            relLFlipShape(o);
        });
    }

    $(v).children().filter('element').forEach(function (o) {
        relLFlipShape(o);
    });
});

// if few objects are selected, managed them
$(selection).filter('element').forEach(function (e) {

    $(e).outRels().forEach(function (o) {
        relLFlipShape(o);
    });
    $(e).inRels().forEach(function (o) {
        relLFlipShape(o);
    });
});

// if relationships are selected,managed them
$(selection).filter("relationship").forEach(function (o) {
    relLFlipShape(o);
});


function relLFlipShape(selection) {

    let incrY = -10;
    let incrX = -10;

    $(selection).filter('element').forEach(function (e) {
        console.log(e.name)
        $(e).outRels().forEach(function (o) {
            let source = o.source;
            let target = o.target;
            sb = source.bounds;
            tb = target.bounds;
            dx = tb.x - sb.x;
            dy = tb.y - sb.y;
            let bps = o.getRelativeBendpoints()
        });
    });


    $(selection).filter("relationship").forEach(function (o) {
        let view = o.view;
        let rel = o.concept;
        let source = o.source;
        let target = o.target;
        sb = source.bounds;
        tb = target.bounds;

        $(source).parents().forEach(function (p) {
            try {
                sb.x += p.bounds.x;
                sb.y += p.bounds.y;
            } catch (e) {
            }
        });

        $(target).parents().forEach(function (p) {
            try {
                tb.x += p.bounds.x;
                tb.y += p.bounds.y;
            } catch (e) {
            }
        });
        dx = tb.x - sb.x;
        dy = tb.y - sb.y;

        let bps = o.getRelativeBendpoints();
        o.deleteAllBendpoints();

        if (bps.length === 0) {
            let bp = {};
            bp.startY = 0;
            bp.startX = 0;
            bp.endY = dy;
            bp.endX = -dx;
            bps = [];
            bps.push(bp);

        }
        if (bps.length === 1) {
            bps[0].startX = -bps[0].startX;
            bps[0].startY = -bps[0].startY;
            bps[0].endX = -bps[0].endX;
            bps[0].endY = -bps[0].endY;
        }

        try {
            let i = 0
            bps.forEach(function (x) {
                o.addRelativeBendpoint(x, i++);
            });
        } catch (e) {
            console.log("! ", e);
        }
    });
}