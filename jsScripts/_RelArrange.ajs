console.clear()

load(__DIR__+'lib/relLib.ajs')

function dynamicSort(property) {
    var sortOrder = 1;
    if (property[0] === "-") {
        sortOrder = -1;
        property = property.substr(1);
    }
    return function (a, b) {
        /* next line works with strings and numbers,
         * and you may want to customize it to your needs
         */
        var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
        return result * sortOrder;
    }
}

// assume connections have orthogonal layout
$(selection).forEach(o => {
    let top = []
    let bottom = []
    let left = []
    let right = []
    let ow = o.bounds.width
    let oh = o.bounds.height
    let ox = o.bounds.x
    let oy = o.bounds.y

    $(o).rels().forEach(r => {
        let bps = r.getRelativeBendpoints()
        r.deleteAllBendpoints()
        let i=0
        bps.forEach(b=>{r.addRelativeBendpoint(b, i++)})

        let bp = null
        let lbp = null
        let dir = null

        if (bps.length > 0) {
            if (r.target.id === o.id) {
                bp = bps[bps.length - 1]
                dir = 'in'
                // in rels
                let x = r.source.bounds.x + (r.source.bounds.width / 2)
                let y = r.source.bounds.y + (r.source.bounds.height / 2)
                let dx = r.source.bounds.x - ox
                let dy = r.source.bounds.y - oy
                let by = y + bp.startY
                let bx = x + bp.startX
                let pos = getBendpointPos(r.source, bx, by)
                console.log(pos)
                if (pos[0] === 'R')
                    right.push({order: y, dir: dir, dx: dx, dy: dy, r: r})
                else if (pos[0] === 'L')
                    left.push({order: y, dir: dir, dx: dx, dy: dy, r: r})
                else if (pos[0] === 'B')
                    bottom.push({order: x, dir: dir, dx: dx, dy: dy, r: r})
                else if (pos[0] === 'T')
                    top.push({order: x, dir: dir, dx: dx, dy: dy, r: r})

            } else {

                // out Rels
                dir = 'out'
                bp = bps[0]
                lbp = bps[bps.length - 1]
                let pos = getObjPos(r.target, r.source)

                let x = r.target.bounds.x + (r.target.bounds.width / 2)
                let y = r.target.bounds.y + (r.target.bounds.height / 2)
                let dx = r.target.bounds.x - ox
                let dy = r.target.bounds.y - oy
                let by = oy + oh/2 + bp.startY
                let bx = ox + ow/2 + bp.startX
                if (pos.includes('R'))
                    right.push({order: y, dir: dir, dx: dx, dy: dy, r: r})
                else if (pos.includes('L'))
                    left.push({order: y, dir: dir, dx: dx, dy: dy, r: r})
                else if (pos.includes('B'))
                    bottom.push({order: x, dir: dir, dx: dx, dy: dy, r: r})
                else if (pos.includes('T'))
                    top.push({order: x, dir: dir, dx: dx, dy: dy, r: r})
            }

        }
    })

    let i = 1
    let n = right.length + 1
    right.sort(dynamicSort('order')).forEach(r => {
        let x = r.r
        let bps = x.getRelativeBendpoints()
        let _bp = null
        if (bps.length > 0)
            _bp = (r.dir === 'in') ? bps[bps.length - 1] : bps[0]
        if (_bp !== null) {
            let sX = _bp.startX
            let sY = _bp.startY
            let eY = -(oh / 2) + (i++ * (oh / n))
            let eX = _bp.endX

            _bp = {
                endX: eX,
                endY: eY,
                startX: sX,
                startY: eY - r.dy
            }
            x.setRelativeBendpoint(_bp, bps.length - 1)
        }
    })

    i = 1
    n = left.length + 1
    left.sort(dynamicSort('order')).forEach(r => {
            let x = r.r
            let bps = x.getRelativeBendpoints()
            let _bp = null
            if (bps.length > 0)
                _bp = (r.dir === 'in') ? bps[bps.length - 1] : bps[0]
            if (_bp !== null) {
                let sX = _bp.startX
                let sY = _bp.startY
                let eY = -(oh / 2) + (i++ * (oh / n))
                let eX = _bp.endX

                _bp = {
                    endX: eX,
                    endY: eY,
                    startX: sX,
                    startY: eY - r.dy
                }
                x.setRelativeBendpoint(_bp, bps.length - 1)
            }
        }
    )

    i = 1
    n = top.length + 1
    top.sort(dynamicSort('order')).forEach(r => {
        let x = r.r
        let bps = x.getRelativeBendpoints()
        let _bp = null
        if (bps.length > 0)
            _bp = (r.dir === 'in') ? bps[bps.length - 1] : bps[0]
        if (_bp !== null) {
            let sX = _bp.startX
            let sY = _bp.startY
            let eY = _bp.endY
            let eX = -(ow / 2) + (i++ * (ow / n)) // lastBP.endX

            _bp = {
                endX: eX,
                endY: eY,
                startX: eX - r.dx,
                startY: sY
            }
            x.setRelativeBendpoint(_bp, bps.length - 1)

        }
    })


    i = 1
    n = bottom.length + 1
    bottom.sort(dynamicSort('order')).forEach(r => {
        // let x = r.r
        // let bps = x.getRelativeBendpoints()

        let bps = getAbsoluteBendpoints(r.r)
        let _bp
        let idx
        if (bps.length > 0)
            idx = (r.dir === 'in') ? bps.length - 1 : 0
            _bp = bps[idx]
        console.log(_bp.x, _bp.y)
        if (_bp !== null) {
            let x = _bp.x // - (ow / 2) + (i++ * (ow / n))
            let y = _bp.y
            setAbsoluteBendpoint(r.r, x,y, idx)
/*

            let sX = _bp.startX
            let sY = _bp.startY
            let eY = _bp.endY
            let eX = -(ow / 2) + (i++ * (ow / n)) // lastBP.endX

            _bp = {
                endX: eX,
                endY: eY,
                startX: eX - r.dx,
                startY: sY
            }
            x.setRelativeBendpoint(_bp, bps.length - 1)

*/
        }
    })

})