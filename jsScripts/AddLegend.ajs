//
// Generate diagram legend
//
// 2020 David GERARD
//
// For a selected view, create a group named 'Legend', in which will be nested for each concepts type found in view
// - a concept, specifically sized to show the pictogram
// - a note, to be used to name or explain the concept specifically in the view, hence preventing to rename the concept
// That way,
// - a model will be a bit polluted but with a specific set of concepts, for legend purpose, prefixed so easily identifiable
// - the same set can be used in multiple views, multiples legends as the associated text is set in a side note
//
// Roadmap:
// - ask to delete an existing group name 'Legend' before create a new group
// - improve typesList cleaning (removing types not concerned by legend) to avoid adding an exception
//

// # Functions

// Get all unique values in a JavaScript array (remove duplicates): [Get all unique values in a JavaScript array (remove duplicates) - Stack Overflow](https://stackoverflow.com/questions/1960473/get-all-unique-values-in-a-javascript-array-remove-duplicates)
function onlyUnique(value, index, self) {
  return self.indexOf(value) === index;
}

// # letiables
let dir = 0; // horizontal
let x = 10 ;
let y = 10 ;
let default_width = 30 ;
let default_height = 30 ;
let typesList = [] ;
let pictogram_x = x + 10 ;
let pictogram_y = y + 30 ;
let label_x = x + pictogram_x + 10 ;
let label_y = y + pictogram_y + 10 ;
let label_width = default_width + 10 ;
let groupWidth = 10 + default_width + 10 + default_width + 10 ;
let groupHeight = default_height + y ;
let prefix = "legend-purpose-" ;
let groupName = "Legend" ;
let noteFigureType = 0 ;
let noteOpacity = 0 ;
let noteOutlineOpacity  = 0 ;

// # Main

console.show();
console.clear();
console.log("> Generate diagram legend:");

let currentView  = $(selection).filter("archimate-diagram-model").first();//= selection.first();
if (! currentView) {
    console.log("> No view identified: exiting.");
    exit();
}

// Loop through all elements used in selected view and pus into array elements type
$(currentView).find().not("relationship").each(function(e) {
    typesList.push(e.type);
});

// Alphabetically sort the array: [javascript - Sort objects in an array alphabetically on one property of the array - Stack Overflow](https://stackoverflow.com/questions/8900732/sort-objects-in-an-array-alphabetically-on-one-property-of-the-array)
typesList.sort(function(a, b) {
    let textA = a.toUpperCase();
    let textB = b.toUpperCase();
    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
});

// Remove duplicates from the array
typesList = typesList.filter(onlyUnique) ;

// Remove from array types which are not concerned by the legend
typesList = typesList.filter(function(item) {
  return item !== 'diagram-model-group';
});
typesList = typesList.filter(function(item) {
  return item !== 'diagram-model-note';
});
typesList = typesList.filter(function(item) {
  return item !== 'diagram-model-connection';
});
typesList = typesList.filter(function(item) {
  return item !== 'archimate-diagram-model';
});

// For each type found in the view
for (let i=0; i<typesList.length; i++) {
    // Search the corresponding standard element to be used for legend purpose
    theConcept = $("."+prefix+typesList[i]).first() ;
    if (!(theConcept)) {
        let theConcept = model.createElement(typesList[i],prefix+typesList[i]);
    };
};

// Create the group with a default size and position, and name it
let legendGroup = currentView.createObject("group", x, y, 10, 10, true)
legendGroup.name = groupName ;

if (dir == 1) {
    // Update 'y' value and groupHeight
    y += 30 ;
    groupHeight += 30 ;
    for (let i=0; i<typesList.length; i++) {
        pictogram = $("." + prefix + typesList[i]).first();
        // Update the group width and height to ensure autonesting will work
        legendGroup.bounds = {width: groupWidth, height: groupHeight};
        // Add the concept sized specifically to illustrate pictogram, and a note to bear the text, both with autonesting
        let object = currentView.add(pictogram, pictogram_x, y, default_width, default_height, true);
        let currentNote = currentView.createObject("note", pictogram_x + label_x, y, label_width, default_height, true);
        currentNote.setFigureType(noteFigureType);
        currentNote.opacity = noteOpacity;
        currentNote.outlineOpacity = noteOutlineOpacity;
        currentNote.text = pictogram.name;
        // Update 'y' value and groupHeight
        y += 40;
        groupHeight += 40;
    }
} else {
    // Update 'x' value and groupwidth
    x += 10 ;
    groupWidth += 200 ;
    groupHeight += 30
    for (let i=0; i<typesList.length; i++) {
        pictogram = $("." + prefix + typesList[i]).first();
        // Update the group width and height to ensure autonesting will work
        legendGroup.bounds = {width: groupWidth, height: groupHeight};
        // Add the concept sized specifically to illustrate pictogram, and a note to bear the text, both with autonesting
        let object = currentView.add(pictogram, x, pictogram_y, default_width, default_height, true);
        let currentNote = currentView.createObject("note", x+40, pictogram_y, label_width+120, default_height, true);
        currentNote.setFigureType(noteFigureType);
        currentNote.opacity = noteOpacity;
        currentNote.outlineOpacity = noteOutlineOpacity;
        currentNote.text = pictogram.name;
        // Update 'y' value and groupHeight
        x += 210;
        groupWidth += 210;
    }
}

console.log("> Ending properly");