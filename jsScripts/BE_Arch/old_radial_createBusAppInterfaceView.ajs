console.clear()
console.log()
if (model == null || model.id == null)
    fatal("You must select a model or some Archimate elements.");

function createBusAppInterfaceView() {
    // library loading for creation of views by scripting
    load(__SCRIPTS_DIR__ + 'lib/lib.ajs');
    // library loading for relationship bend points management
    load(__SCRIPTS_DIR__ + 'lib/relLib.ajs');
    // javascript library for Excel workbook parsing
    load(__SCRIPTS_DIR__ + 'libJs/sheetjs.js')
    log('*** createBusAppInterfaceView')

    let optionTech = false
    let optionBo = true
    let optionFlow = false
    let optionDep = false

    // Variables initialization
    // Objects <name>, <element>, <relation>, <node>, <connection>
    let tag, filePath
    let XLpath = './mfAppFiles/Application Functional Information/'
    let XLtrailer = ' - BE Mainframe Application Functional Information.xlsx'
    let view                                        // the Application Interaction view
    let baName, ba, baRel, baNode, baConn           // business application (IT Solution)
    let gtwName, gtw, gtwRel, gtwNode, gtwConn      // Gateway platform if any (IT Solution)
    let ba2Name, ba2, ba2Rel, ba2Node, ba2Conn      // connected business application (IT Solution)
    let afName, af, afRel, afNode, afConn           // Application Function
    let af2Name, af2, af2Rel, af2Node, af2Conn      // connected Application Function
    let acName, ac, acRel, acNode, acConn           // Application Component (IT Product)
    let ac2Name, ac2, ac2Rel, ac2Node, ac2Conn      // connected Application Component (IT Product)
    let boName, bo, boRel, boNode, boConn           // Business Object
    let bo2Rel, bo2Conn                             // Bus Object relation with connected Application Function
    let aiName, ai, aiRel, aiNode, aiConn           // Application Interface
    let ba2baRel, af2afRel                          // relationships between connected business application, app function & bus object
    let ba2baConn, af2afConn
    let ac2acRel, ac2GtwRel, ac22GtwRel             // relationships between app. components & with gateway
    let ac2acConn
    let ac2GtwConn, ac22GtwConn
    let ac2aiRel, ac2aiTrigRel                      // relationship between app comp and app interface (flow, trigger)
    let dir                                         // flow direction

    // Coordinates for object's node placement in views
    let xApp2 = 800, yApp2 = 40
    let wApp = 180
    let xAf = 40, yAf = 40, incX = 0, incY = 0
    let xAf2 = 40, yAf2 = 40, incX2 = 0, incY2 = 0
    let incBa2 = 0

    // get file path from batch arguments
    let argList = $.process.argv
    for (let i = 0; i < argList.length; i++) {
        if (argList[i] === '-tag') {
            tag = argList[i + 1]
            filePath = XLpath + tag + XLtrailer
        } else if (argList[i] === '-f') {
            filePath = argList[i + 1]
            // tag = filePath.substr(0, 3)
            tag = filePath.match(/(.*)\s+-\s+.*/)[1]
        } else if (argList[i] === '-s') {
            optionTech = true
        }
    }

    if (!filePath) {
        logFile = __DIR__ + '../test/log.log'
        debug = true
        deb('*** TEST ***')
        tag = 'TEST'
        XLpath = __DIR__ + '../test/'
        filePath = XLpath + tag + XLtrailer
    }

    if (!!tag)
        model.name = tag

    // Read XL file
    let workbook = XLSX.read(base64encode(readFileSync(filePath)), {type: 'base64'});
    // Dump file second sheet (Interfaces)  content as JSON object
    let XL_row_object = XLSX.utils.sheet_to_json(workbook.Sheets['Interactions'], {range: "A2:I100"});

    // sort per 'connected application function', per 'Business Object' and per 'this application function'
    XL_row_object = XL_row_object.sort(dynamicSort('This Application Function'))
    XL_row_object = XL_row_object.sort(dynamicSort('Connected Application Function'))
    XL_row_object = XL_row_object.sort(dynamicSort('Business Object'))


    // count number of unique application functions for this business app
    let nAf = uniqueItems(XL_row_object, 'This Application Function')
    let nAf2 = uniqueItems(XL_row_object, 'Connected Application Function')
    let nBa2 = uniqueItems(XL_row_object, 'Connected IT Solution')
    let nBo = uniqueItems(XL_row_object, 'Business Object')
    // organize dependent business app & business ojbect around this business app
    // calculate the angle increment
    // let alpha = (2 * Math.PI) / (Math.max(nBO, nBa2))
    let alpha = (2 * Math.PI) / nBa2

    // calculate the radius between this bus app and the business objects
    let boDist = Math.sqrt(Math.pow(130, 2) / (2 * (1 - Math.cos(alpha))))
    // calculate the radius between this bus app and the other bus app
    let ba2Dist = Math.sqrt(Math.pow(250, 2) / (2 * (1 - Math.cos(alpha))))
    // calculate the coordinates of this business app node in the view
    let xApp1 = ba2Dist + 200
    let yApp1 = ba2Dist + 200
    // formula to calculate the position of an object, given its radius and angle, with respect to this Bus App position
    const pos = (r, theta) => [xApp1 + r * Math.sin(theta), yApp1 + r * Math.cos(theta)]

    // create the folder structure if not existing
    createFolderStructure()

    // get the Business Application from the first Application Function relationships
    afName = stripIllegalChar(XL_row_object[0]['This Application Function'])
    if (!!afName && afName !== '') {
        af = getOrCreateElement('application-function', afName, false, folders['otherFolder']['folder'])
        if (!af) {
            log('Fatal: Not found - Application Function "' + afName + '" at row 2')
            return
        }
        // get the related Business Application
        afRel = $(af).inRels('assignment-relationship').first()
        if (!afRel) {
            log('Fatal: Application Function "' + afName + '" has not upward Business Application at row ' + String(XL_row_object.indexOf(row) + 2))
            return
        }
        ba = afRel.source
        baName = ba.name

        // and create the view
        let viewName = 'INTERACTIONS ' + baName
        let folder = folders['appInteractFolder']['folder']
        view = $("." + viewName).first()
        if (!!view) {
            view.delete()
        }
        view = model.createArchimateView(viewName, folder)
        // add the Business Applications 'app' as new object in the view
        baNode = view.add(ba, xApp1, yApp1, wApp, 100 * (nAf + 1))
    } else {
        log('Fatal: Missing - Application Function at row ' + String(XL_row_object.indexOf(row) + 2))
        return
    }
    // parse each row
    // we need the following columns:
    //  This Application Function
    //  Business Object
    //  Direction
    //  Connected Application Function
    //  Connected IT Solution
    //  This Application Technical Component (IT Product)
    //  Interface
    //  Gateway (IT Product)
    //  Connected Application Technical Component (IT Product)

    nBa2 = 0
    nBo = 0
    XL_row_object.forEach(row => {
        nRow = XL_row_object.indexOf(row)
        // read relevant cells by column name
        // related Application Function
        afName = stripIllegalChar(row['This Application Function'])
        if (!!afName && afName !== '') {
            // get the application function object, which is assumed to already exist
            af = getOrCreateElement('application-function', afName, false, folders['otherFolder']['folder'])
            if (!af) {
                log('Fatal: Not found - Application Function "' + afName + '" at row ' + String(XL_row_object.indexOf(row) + 2))
                return
            }

            // get the related Business Application
            afRel = $(af).inRels('assignment-relationship').first()
            if (!afRel) {
                log('Fatal: Application Function "' + afName + '" has not upward Business Application at row ' + String(XL_row_object.indexOf(row) + 2))
                return
            }

            boName = stripIllegalChar(row['Business Object'])
            if (!boName || boName === '') {
                log('Fatal: Missing Business Object field at row ' + String(XL_row_object.indexOf(row) + 2))
                return
            }

            bo = getOrCreateElement('business-object', boName, false, folders['otherBoFolder']['folder'])
            if (!bo) {
                log('Fatal: Not found - Business Object "' + boName + '" at row ' + String(XL_row_object.indexOf(row) + 2))
                return
            }

            boRel = getOrCreateRelationship("access-relationship", "", af, bo)
            if (!boRel) {
                log('Fatal: Not found -  Business Object Relationship "' + afName + '" at row ' + String(XL_row_object.indexOf(row) + 2))
                return
            }

            // get the connected Business Application - create it if needed
            ba2Name = stripIllegalChar(row['Connected IT Solution'])
            ba2 = getOrCreateElement('application-collaboration', ba2Name, true, folders['itsFolder']['folder'])

            // and so for the related Application Function
            let af2Name = stripIllegalChar(row['Connected Application Function'])
            af2 = getOrCreateElement('application-function', af2Name, true, folders['otherFolder']['folder'])
            // and relate them
            // ba 2 ba dependency
            ba2baRel = getOrCreateRelationship('flow-relationship', 'Depends on', ba, ba2, true)
            // ba2 to af2
            af2Rel = getOrCreateRelationship('assignment-relationship', '', ba2, af2, true)
            // af 2 af
            dir = stripIllegalChar(row['Direction']).toUpperCase()
            if (dir === 'IN') {
                af2afRel = getOrCreateRelationship('flow-relationship', bo.name, af2, af, true)
            } else {
                af2afRel = getOrCreateRelationship('flow-relationship', bo.name, af, af2, true)
            }

            bo2Rel = getOrCreateRelationship("access-relationship", "", af2, bo, true)
            $(bo2Rel).attr("access-type", "access")

            // create the connected Business Application
            ba2Node = checkNodeInView(view, ba2)

            if (!ba2Node) {
                [xApp2, yApp2] = pos(ba2Dist, alpha * nBa2++)
                ba2Node = view.add(ba2, xApp2, yApp2, wApp, (optionTech) ? 150 : 115)
            }

            if (optionDep) {
                // add the ba 2 ba depencency connection
                ba2baConn = checkRelInView(ba2baRel, baNode, ba2Node, true, view)
                ba2baConn.lineColor = "#6F6F6F"
                ba2baConn.fontColor = "#6F6F6F"
            }

            // add the Application Function inside the Bus App
            afNode = checkNodeInView(view, af)
            if (!afNode) {
                afNode = baNode.add(af, xAf, yAf + incY, -1, 100)
                incY += (optionTech) ? 250 : 120

            }
            afConn = checkRelInView(afRel, baNode, afNode, true, view)

            // add the application function flows
            af2Node = checkNodeInView(view, af2)
            if (!af2Node) {
                let nn = []
                $(ba2).outRels('assignment-relationship').forEach(r => {
                    nn.push(r.target.name)
                })
                incY2 = Math.min(0, ((optionTech) ? 250 : 100) * nn.indexOf(af2.name))
                af2Node = ba2Node.add(af2, xAf2, yAf2 + incY2, -1, -1)
            }

            if (optionFlow) {
                if (dir === 'IN') {
                    af2afConn = checkRelInView(af2afRel, af2Node, afNode, true, view, bo.name)
                    af2afConn.textPosition = CONNECION_TEXT_POSITION.SOURCE
                } else {
                    af2afConn = checkRelInView(af2afRel, afNode, af2Node, true, view, bo.name)
                    af2afConn.textPosition = CONNECION_TEXT_POSITION.TARGET
                }
            }
            if (optionBo) {
                // Add the common business object between the 2 app functions
                boNode = checkNodeInView(view, bo)
                // check if af2Node already has BO

                // boNode = (!!boNode) ? boNode : view.add(bo,
                //     (ba2Node.bounds.x + baNode.bounds.x + baNode.bounds.width - 120) / 2,
                //     ba2Node.bounds.y + af2Node.bounds.y + 40 + nBo * 60, -1, -1)

                const [xBo, yBo] = pos(boDist, alpha * nBo++)
                boNode = (!!boNode) ? boNode : view.add(bo, xBo, yBo, -1, -1)

                boConn = checkRelInView(boRel, afNode, boNode, true, view)
                bo2Conn = checkRelInView(bo2Rel, af2Node, boNode, true, view)

                boConn.lineColor = "#00AA00"
                boConn.fontColor = "#00AA00"
                bo2Conn.lineColor = "#00AA00"
                bo2Conn.fontColor = "#00AA00"
            }

            if (optionTech) {
                // add now the Application Components
                acName = stripIllegalChar(row['This Application Technical Component (IT Product)'])
                if (!acName) {
                    log('Fatal: Missing Application Technical Component at row ' + String(XL_row_object.indexOf(row) + 2))
                    return
                }
                ac = getOrCreateElement('application-component', acName, true, folders['itpFolder']['folder'])

                ac2Name = stripIllegalChar(row['Connected Application Technical Component (IT Product)'])
                if (!ac2Name) {
                    log('Fatal: Missing Connected Application Technical Component at row ' + String(XL_row_object.indexOf(row) + 2))
                    return
                }
                ac2 = getOrCreateElement('application-component', ac2Name, true, folders['itpFolder']['folder'])

                // related them to their Application Function
                acRel = getOrCreateRelationship('serving-relationship', '', ac, af, true)
                ac2Rel = getOrCreateRelationship('serving-relationship', '', ac2, af2, true)

                // and insert them in the view
                acNode = checkNodeInView(view, ac)
                acNode = (!!acNode) ? acNode : baNode.add(ac,
                    afNode.bounds.x,
                    afNode.bounds.y + 120, -1, -1)
                acConn = checkRelInView(acRel, acNode, afNode, true, view)

                ac2Node = checkNodeInView(view, ac2)
                ac2Node = (!!ac2Node) ? ac2Node : ba2Node.add(ac2,
                    af2Node.bounds.x,
                    af2Node.bounds.y + 120, -1, -1)
                ac2Conn = checkRelInView(ac2Rel, ac2Node, af2Node, true, view)

                // check if a gateways should be added
                gtwName = stripIllegalChar(row['Gateway (IT Product)'])
                let s = stripIllegalChar(row['Interface'])
                s = (!!s) ? s : ''
                if (!!gtwName && gtwName !== '') {
                    gtw = getOrCreateElement('application-collaboration', gtwName + ' GATEWAY', true, folders['itsFolder']['folder'])
                    gtwNode = checkNodeInView(view, gtw)
                    gtwNode = (!!gtwNode) ? gtwNode : view.add(gtw,
                        (ba2Node.bounds.x + baNode.bounds.x + baNode.bounds.width - 120) / 2,
                        ba2Node.bounds.y + af2Node.bounds.y + 120, -1, -1)
                    // set the flow connections with the technical components
                    if (dir === 'IN') {
                        ac2GtwRel = getOrCreateRelationship("flow-relationship", s, gtw, ac, true)
                        ac2GtwConn = checkRelInView(ac2GtwRel, gtwNode, acNode, true, view)

                        ac22GtwRel = getOrCreateRelationship("flow-relationship", s, ac2, gtw, true)
                        ac22GtwConn = checkRelInView(ac22GtwRel, ac2Node, gtwNode, true, view)
                    } else {
                        ac2GtwRel = getOrCreateRelationship("flow-relationship", s, ac, gtw, true)
                        ac2GtwConn = checkRelInView(ac2GtwRel, acNode, gtwNode, true, view)

                        ac22GtwRel = getOrCreateRelationship("flow-relationship", s, gtw, ac2, true)
                        ac22GtwConn = checkRelInView(ac22GtwRel, gtwNode, ac2Node, true, view)
                    }

                } else {
                    // no gateways, no API
                    if (dir === 'IN') {
                        ac2acRel = getOrCreateRelationship('flow-relationship', s, ac2, ac, true)
                        ac2acConn = checkRelInView(ac2acRel, ac2Node, acNode, true, view)
                    } else {
                        ac2acRel = getOrCreateRelationship('flow-relationship', s, ac, ac2, true)
                        ac2acConn = checkRelInView(ac2acRel, acNode, ac2Node, true, view)
                    }
                }
            }

        }

    })

    $(view).children('business-object').forEach(boNode => {
        const doit = doEachRel(sRel)
        doit(boNode, 0)
        distributeConnections(boNode)
    })
    // Arrange connections layout
    $(baNode).children().forEach(afNode => {
        const doit = doEachRel(sRel)
        doit(afNode, 0)
    })

    $(view).find('application-function').forEach(afNode => {
        distributeConnections(afNode)
    })

    if (optionDep) {
        // Re-position the dependency flows connections between Application Collaborations
        $(baNode).outRels('flow-relationship').forEach(d => {
            ba2Node = d.target
        })
    }


    console.log('Done.')
}

createBusAppInterfaceView()
