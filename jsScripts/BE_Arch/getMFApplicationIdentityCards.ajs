console.clear();
load(__SCRIPTS_DIR__ + 'lib/lib.ajs')
load(__SCRIPTS_DIR__ + 'libJs/sheetjs.js')

filePath = 'C:\\Users\\XY56RE\\ING\\BE Architecture CoE Application Landscape - General\\BE Mainframe Decommissioning\\BE Mainframe Application Identity Cards.xlsx'
console.log(filePath)
workbook = XLSX.read(base64encode(readFileSync(filePath)), {type: 'base64'});
rows = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]], {range: "A1:Y200"});
console.log(rows.length)
let laaMap = {};
let addRel = [];
let delRel = [];

// Columns to pass as properties to Business Application and their mapping in Archi model
let headers = [
    ["CMDB ID", "CMDB ID"],
    ["ING ID", "ING ID"],
    ["Environment", "Environment"],
    ["Operational Status", "Operational Status"],
    ["Documentation", "Documentation"],
    ["Description", "Description"],
    ["BIA Date", "BIA Date"],
    ["Comment", "Comment"],
    ["Category", "Category"],
    ["Parent IT Solution", "Parent IT Solution"],
    ["Business unit", "Business unit"],
    ["Support Group", "Support Group"],
    ["Application business owner", "Asset Owner"],
    ["Application IT Custodian", "IT Custodian"],
    ["Assigned architect", "Architect"],
    ["Business Capability Level 1", "BCM1"],
    ["Business Capability Level 2", "BCM2"],
    ["Business Capability Level 3", "BCM3"],
    ["Domain", "Domain"]
];

getMFApplicationIdentityCards()

// function to embed all properties in a single field 'AT_DESC'
function embedProperties(o) {
    let doc = o.documentation;
    let pp = {};
    o.prop().forEach(function (p) {
        if (p !== 'AT_DESC')
            pp[p] = o.prop(p);
    })
    doc += '\n\nproperties=' + JSON.stringify(pp, null, space = 4) + ';\n';
    o.prop('AT_DESC', doc);
}

function getMFApplicationIdentityCards() {

    if (typeof folders !== 'undefined')
        createFolderStructure()

    let buRole = getOrCreateRole("Business Unit");
    let aoRole = getOrCreateRole("Asset Owner");
    let itcRole = getOrCreateRole("IT Custodian");
    let archRole = getOrCreateRole("Architect");
    let suppRole = getOrCreateRole("Support Group");
    let busFolder
    let teamsFolder
    let personsFolder
    let itsFolder
    let roleFolder

    personsFolder = folders['peopleFolder']['folder']
    teamsFolder = folders['teamFolder']['folder']
    roleFolder = folders['roleFolder']['folder']
    itsFolder = folders['itsFolder']['folder']

    console.log('Start')
// Pass 1 - loop - Get Bus App & their properties
    rows.forEach(function (d) {
            let baName = stripIllegalChar(d['Unique Mainframe applications']);
            if (baName !== "" && !!baName) {
                // get business app object
                if (stripIllegalChar(d["Category"]) === "Business Application") {
                    ba = getOrCreateElement("application-collaboration", baName, true, itsFolder);

                    // Update business application properties
                    headers.forEach(function (h) {
                        value = String(stripIllegalChar(d[h[0]]))
                        if (value === 'undefined')
                            value = ''
                        ba.prop(h[1], value);
                    });

                    // Post-processing of some properties
                    // Documentation formatting
                    doc = (d["Documentation"] === undefined) ? '' : stripIllegalChar(d["Documentation"])
                    desc = (d["Description"] === undefined) ? '' : stripIllegalChar(d["Description"])
                    comment = (d["Comment"] === undefined) ? '' : stripIllegalChar(d["Comment"])

                    ba.documentation = doc + String((desc === '') ? "" : "\n\n" + desc)
                        + String((comment === '') ? "" : "\n\n--- TO CHECK: ---\n" + comment);

                    // Archi concept type check & re-assignment
                    if (stripIllegalChar(d["Category"]) === "Business Application") {
                        ba.type = "application-collaboration"
                        if (!!ba.prop('Parent IT Solution')) {
                            delRel.push({src: ba.prop('Parent IT Solution'), dst: baName})
                        }
                    }

                    if (ba.type === "application-collaboration") {
                        /*
                                        // get LAA block references & establish relationship
                                        let pat = /^(\d+.?\d*.?\d*) /
                                        let laaRef = pat.exec(d['LAA block']);
                                        if (laaRef !== null) {
                                            laaRef = laaRef[1]

                                            if (!(laaRef in laaMap)) {
                                                // find LAA concept in LAA framework
                                                try {
                                                    $('business-function').forEach(function (x) {
                                                        if (x.prop('outline') === laaRef) {
                                                            laaMap[laaRef] = x;
                                                            throw 'Break';
                                                        }
                                                    });
                                                } catch (exception) {
                                                    if (exception !== 'Break') throw exception
                                                }
                                            }


                                            // Get LAA block concept from the LAA framework view
                                            let e = laaMap[laaRef];

                                            // check if a relation of the same type already exists or creating a new one
                                            if ($(e).inRels('serving-relationship').length === 0) {
                                                try {
                                                    model.createRelationship('serving-relationship', "", ba, e);
                                                } catch (exception) {
                                                    // console.log("!! LAA relation ", app, e, exception)
                                                }
                                            }


                                        }
                         */
                        ba.prop('S-Code', '')
                        // check if the application has actors (only if it is a Business Application)

                        // Add Actors & relationships if not yet defined
                        let bu = stripIllegalChar(d['Business unit']);
                        if (!!bu && bu !== '') {
                            e = getOrCreateElement("business-actor", bu, true, teamsFolder);
                            e.prop('teamCode', '')
                        }

                        let aoName = stripIllegalChar(d['Application business owner'])   //ba.prop('Asset Owner');
                        if (!!aoName && aoName !== '') {
                            ao = getOrCreateElement("business-actor", aoName, true, personsFolder);
                            ao.prop('corporateKey', '')
                        }

                        let itcName = stripIllegalChar(d['Application IT Custodian']);
                        if (!!itcName && itcName !== '') {
                            e = getOrCreateElement("business-actor", itcName, true, personsFolder);
                            e.prop('corporateKey', '')
                        }
                        let archName = stripIllegalChar(d['Assigned architect']);
                        if (!!archName && archName !== '') {
                            e = getOrCreateElement("business-actor", archName, true, personsFolder);
                            e.prop('corporateKey', '')
                        }
                        let sgName = stripIllegalChar(d['Support Group']);
                        if (!!sgName && sgName !== '') {
                            e = getOrCreateElement("business-actor", sgName, true, teamsFolder);
                            e.prop('teamCode', '')
                        }
                    }
                } else if (stripIllegalChar(d["Category"]) === "IT Product") {

                    // check if a Bus App exists with the same name
                    ba = getOrCreateElement("application-collaboration", baName, false, itsFolder);
                    if (!!ba) {
                        log("Warning: Demoting " + baName + " to IT Product of " + d["Parent IT Solution"])
                        // demote to application component
                        ba.type = "application-component";

                        // add relationship with the parent IT Solution
                        if (d["Parent IT Solution"] !== null && d["Parent IT Solution"] !== '') {
                            addRel.push({src: stripIllegalChar(d["Parent IT Solution"]), dst: baName});
                        }
                        // remove old properties
                        ba.prop().forEach(p => {
                            if (p !== 'GUID' && p !== 'ARIS')
                                ba.removeProp(p)
                        })
                        ba.prop('P-Code', '')
                        itp = ba

                        // else check or create an application component
                    } else {
                        itp = getOrCreateElement("application-component", baName, true, itsFolder);
                        let pBaName = stripIllegalChar(d['Parent IT Solution'])
                        if (!!pBaName && pBaName !== '') {
                            let pBa = getOrCreateElement("application-collaboration", pBaName, false)
                            if (!!pBa) {
                                getOrCreateRelationship("aggregation-relationship", "", pBa, itp, true)
                            }
                        }
                        // remove all relationships with actors excepted Support Group
                        $(itp).rels('association-relationship').forEach(r => {
                            if (r.name !== 'Support Group')
                                r.delete()
                        })
                        itp.prop('P-Code', '')
                    }
                }
            }
        }
    )

// Pass 2 - establish relationships between Business App & IT Products for re-assigned ones
    addRel.forEach(function (r) {
        let source = $("." + r['src']).first();
        let target = $("." + r['dst']).first();
        if (!(source === null || target === null)) {
            getOrCreateRelationship('aggregation-relationship', "", source, target, true)
        } else {
            // console.log("!! addRel ", r, source, target)
        }
    });

// or remove them
    delRel.forEach(function (r) {
        let source = $("." + r['src']).first();
        let target = $("." + r['dst']).first();
        if (!(source === null || target === null)) {
            $(source).outRels('aggregation-relationship').forEach(function (x) {
                if (x.target.id === target.id) {
                    x.delete();
                }
            });

        } else {
            console.log("!! delRel ", r, source, target)
        }
    });

// Pass 3 - Add actors & roles to the business application
    $('application-collaboration').forEach(function (ba) {
        // console.log(app)
        let aoName = ba.prop('Asset Owner');
        let itcName = ba.prop('IT Custodian');
        let archName = ba.prop('Architect');
        let suppName = ba.prop('Support Group');
        let buName = ba.prop('Business unit');

        // console.log(ba.name, aoName, itcName, archName, suppName, buName)
        let actors = [];

        /*

                    $(ba).inRels('association-relationship').forEach(function (r) {
                        actors.push(r.source.name);
                    })

        */
        function addRoleRelationship(actor, roleName) {
            role = $("." + roleName).first();
            if (!!role)
                r = getOrCreateRelationship('assignment-relationship', "", actor, role, true)
        }

        let ao = $("." + aoName).first();
        if (!!ao) {
            let r = getOrCreateRelationship('association-relationship', "Asset Owner", ao, ba, true);
            r.setAssociationDirected(true);
        }
        addRoleRelationship(ao, 'Asset Owner');

        let itc = $("." + itcName).first();
        if (!!itc) {
            let r = getOrCreateRelationship('association-relationship', "IT Custodian", itc, ba, true);
            r.setAssociationDirected(true);
        }
        addRoleRelationship(itc, 'IT Custodian');

        let archi = $("." + archName).first();
        if (!!archi) {
            let r = getOrCreateRelationship('association-relationship', "Architect", archi, ba, true);
            r.setAssociationDirected(true);
        }
        addRoleRelationship(archi, 'Architect');

        let bu = $("." + buName).first();
        if (!!bu) {
            let r = getOrCreateRelationship('association-relationship', "Business Unit", bu, ba, true);
            r.setAssociationDirected(true);
        }
        addRoleRelationship(bu, 'Business Unit');

        let supp = $("." + suppName).first();
        if (!!supp) {
            let r = getOrCreateRelationship('association-relationship', "Support Group", supp, ba, true);
            r.setAssociationDirected(true);
        }
        addRoleRelationship(supp, "Support Group")


        /*
        // Add Bus Capabilities relationships

        // find Business Capability reference - Try @level 3 and
        // move up to Level 2 or 1 if not found

        let bcs = {};
        let bc = null;
        $('Capability').forEach(function (c) {
            bcs[c.name.toLowerCase()] = c.id;
        });

        let bcName = ba.prop("BCM3");
        if (!!bcName)
            bcName = bcName.toLowerCase();
        let lev = 3;
        if (bcName in bcs) {
            bc = $("#" + bcs[bcName]).first()
        } else {
            lev--
            bcName = ba.prop("BCM2");
            if (!!bcName)
                bcName = bcName.toLowerCase();
            if (bcName in bcs) {
                bc = $("#" + bcs[bcName]).first()
            } else {
                lev--
                bcName = ba.prop("BCM1");
                if (!!bcName)
                    bcName = bcName.toLowerCase();
                bc = $("#" + bcs[bcName]).first()
            }
        }
        // Add or update relationship to the Business Application
        if (!!bc) {
            // check if relationship already exists or create
            getOrCreateRelationship("realization-relationship", name = "", source = ba, target = bc, create = true)
        } else {
            console.log('!! Warning: ' + ba.name + ': Business Capability ' + lev + ' - ' + bcName + ' not found!')
        }
    */
        // Embed properties
        embedProperties(ba)

    });


// Finished!
    console.log('Done')

}