if (model == null || model.id == null)
    fatal("You must select a model or some Archimate elements.");


function createBusAppGovernanceViews() {
    load(__SCRIPTS_DIR__ + 'lib/lib.ajs')
    load(__SCRIPTS_DIR__ + 'lib/relLib.ajs');

    let appName = null
    let argList = $.process.argv
    for (let i = 0; i < argList.length; i++) {
        if (argList[i] === '-tag') {
            appName = argList[i + 1]
        } else if (argList[i] === '-f') {
            appName = argList[i + 1].match(/\/([^/]*)\s+-\s+.*/)[1]
        }
    }

    if (!appName)
        appName = 'KIC'

    let app = $("." + appName).first()
    if (!app || app.type !== 'application-collaboration') {
        log('Error: ' + appName + ' is not an existing IT Solution in the model')
        return
    }

    let appRels = $(app).inRels('association-relationship')
    if (appRels.length > 0) {
        // create the folder structure if no existing
        createFolderStructure()
        // and create the view
        let viewName = 'GOVERNANCE ' + app.name
        let folder = folders['appGovFolder']['folder']

        let view = $("." + viewName).first()
        if (!!view) {
            view.delete()
        }

        view = model.createArchimateView(viewName, folder)

        // add the Business Application 'appName' as new object in the view
        let baNode = view.add(app, 320, 40, -1, -1)

        // add the actors & roles
        let x = 20
        let y = 200
        appRels.forEach(r => {
            // check if source concept is a Actor-type
            if (r.source.type === 'business-actor') {
                let node = checkNodeInView(view, r.source)
                node = (!!node) ? node : view.add(r.source, x, y, -1, -1)
                let conn = checkRelInView(r, node, baNode)
                conn = (!!conn) ? conn : view.add(r, node, baNode)
                conn.textPosition = CONNECION_TEXT_POSITION.SOURCE
                lRel(conn, 1)
                // get related role concept
                let rel = $(r.source).outRels('assignment-relationship').filter(o => {
                    return (o.target.name === r.name)
                }).first()
                if (!!rel) {
                    let roleNode = checkNodeInView(view, rel.target)
                    roleNode = (!!roleNode) ? relNode : view.add(rel.target, x, y + 150, -1, -1)
                    checkRelInView(rel, node, roleNode, true, view)
                }
                x += 150
            }
        })
    }
}

createBusAppGovernanceViews()