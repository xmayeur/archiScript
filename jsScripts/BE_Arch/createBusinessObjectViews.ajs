console.clear()
load(__SCRIPTS_DIR__ + 'lib/lib.ajs')

let level = 1
let outline = "0"
let w0 = 120
let h0 = 55
let x0 = 50
let y0 = 40
let gapX = 20
let gapY = 20

function createBusinessObjectViews() {
    all = $('.All')
    let elem = $(all).first()
    console.log(elem)
    let rel = getOrCreateRelationship("specialization-relationship", "", elem, elem, false)
    if (!!rel)
        rel.delete()
    if (!!elem)
        addBoView(elem)

    $(all).inRels().forEach(r => {
        console.log('+ ' + r.source.name)
        if (r.source.name !== 'All') {
            addBoView(r.source)
        }
    })
    console.log('Done')
}

function addBoView(elem) {

    let viewName = 'ESPERANTO - ' + elem.name + ' Data Object View'
    let folder = createSubFolder('Views','04. Esperanto Business Objects')
    let view = $("." + viewName).first()
    if (!!view) {
        view.delete()
    }
    view = model.createArchimateView(viewName, folder)
    let nodeL1 = view.add(elem, 40, 20, -1, -1)
    /*
    let outlev = incrOutline(false, false)
    nodeL1.prop('level', String(outlev[0]))
    nodeL1.prop('outline', outlev[1])
     */
    embedProperties(nodeL1)
    let relsL1 = $(elem).inRels('specialization-relationship')
    let bounds = embedDependencies(view, nodeL1, relsL1)
    let w = bounds.width
    let h = bounds.height

    nodeL1.bounds = {
        width: w + x0 + gapX,
        height: h + y0 + gapY
    }
}

function embedDependencies(view, node, rels) {
    // incrOutline(true, false)
    let maxW = 750
    let x = x0
    let y = y0
    let maxY = 0
    let bounds = {}
    // Loop on level 2 objects
    rels.forEach(r => {
        let source = r.source
        let newNode = node.add(source, x, y, w0, h0)
        if (source.prop('status') === 'created')
            newNode.fillColor = '#FCFC00'
        /*
        let outlev = incrOutline(false, false)
        newNode.prop('level', String(outlev[0]))
        newNode.prop('outline', outlev[1])
         */
        // setOutline(newNode)
        embedProperties(newNode)


        let newNodeRels = $(newNode.concept).inRels('specialization-relationship')
        view.add(r, newNode, node)
        // console.log(newNode.name, newNodeRels.length, newNode.bounds)
        bounds = embedDependencies(view, newNode, newNodeRels)
        let w = bounds.width
        let h = bounds.height
        maxY = Math.max(maxY, h)
        node.bounds = {
            width: Math.max(node.bounds.width, x + w + x0),
            height: Math.max(node.bounds.height, y + h + y0)
        }

        x += w + gapX
        if (x + w + gapX > maxW) {
            x = x0
            y += maxY + gapY
            maxY = 0
        }
    })
    return node.bounds

}

/*
function setOutline(o, level = 0, outline = "0") {
    let outl = outline
    Object.entries(o).forEach(entry => {
        const [key, value] = entry
        obj = o[key]
        if (key !== 'elem' && key !== 'level' && key !== 'outline') {
            obj['level'] = level + 1
            obj['elem'].prop('level', String(level + 1))
            outl = incrOutline(outl)
            obj['outline'] = outl
            obj['elem'].prop('outline', outl)
            setOutline(obj, level + 1, outl + ".0")
        }
    });
}

function incrOutline(outl) {
    result = outl.match(/^([\d+.]*)\.?(\d+)$/)
    if (!!result) {
        r1 = (!!result[1]) ? result[1] : ''
        return r1 + String(parseInt(result[2]) + 1)
    } else {
        return null
    }
}
*/
createBusinessObjectViews()


