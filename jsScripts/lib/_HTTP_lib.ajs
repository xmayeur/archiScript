// #!/usr/bin/env jjs
/*####################################################################################################################################
# As Nashorn does not have http capabilities through XMLHttpRequest (DOM API), we have to use regular Java classes instead.
# This sample shows how this can be acheived without depending on any third party libraries. Just a standard Java 8 JDK.
# Make sure to have JAVA_HOME/bin on your PATH for the shebang to work. Then just chmod +x away and run...
# Alternatively if you're on a non *nix OS, start with jjs -scritping httpsample.js
####################################################################################################################################
*/

/*
var url = "https://api.github.com/users/billybong/repos";
var response;


//naive java implementation variant, if curl is not available
print("using native");
response = httpGet("https://api.github.com/users/billybong/repos");

var repos = JSON.parse(response.data);
var status = repos.statusCode;

print(<<EOD);
id : ${repos[0].id}
name : ${repos[0].name}
full name : ${repos[0].full_name}
owner : ${repos[0].owner.login}
EOD


var myName =  repos[0].name;
console.log("name " + myName);

var json = {id: 1, someValue: "1234"};
try {
    response = httpPost("http://postcatcher.in/catchers/5452274a3a57d0020000086b", JSON.stringify(json));
    var repos = JSON.parse(response.data);
    console.log(response)
} catch(err) {
    console.log(response.statusCode + " Error: "+ err.message)
}
*/

/**********************
HTTP UTILITY FUNCTIONS
***********************/

var authorization=null;

function setAuth(username, password) {
    var Base64 = java.util.Base64;
    var encoder = Base64.getEncoder();
    if (username != null && password != null) {
        authorization = username + ":" + password;
    }

    if (authorization != null) {
        encodedBytes = encoder.encodeToString(authorization.getBytes() );
        authorization = "Basic " + encodedBytes;
    } 
    
    return authorization;
}

function forceUnicodeEncoding(string) {
  return unescape(encodeURIComponent(string));
}

function httpGet(theUrl){
    var con = new java.net.URL(theUrl).openConnection();
    con.requestMethod = "GET";
    if (authorization != null) {con.setRequestProperty("Authorization", authorization);}
    return asResponse(con);
}

function httpPost(theUrl, data, contentType, method, headers){
    contentType = contentType || "application/json";
    method = method || 'POST';
    var con = new java.net.URL(theUrl).openConnection();

    con.requestMethod = method;
    con.setRequestProperty("Content-Type", contentType);
    if (authorization != null) {con.setRequestProperty("Authorization", authorization);}
    if (headers != undefined) {
        for (var prop in headers) {
            con.setRequestProperty(prop ,headers[prop]);
        }
    }
    // Send post request
    con.doOutput=true;
    write(con.outputStream, data);

    return asResponse(con);
}

function httpSendImage(method, theUrl, files,  headers) {

    method = method || 'POST';

    lineEnd = "\r\n";
    twoHyphens = "--";
    boundary = "***232404jkg4220957934FW**";
	var	existingFileName='';

    maxBufferSize = 1 * 1024 * 1024;

    // Post Client request     
    try {
        var con = new java.net.URL(theUrl).openConnection();
        con.doOutput=true;
        con.doInput=true;
        con.useCaches=false;
        con.requestMethod = method;
        
        con.setRequestProperty("Connection", "Keep-Alive");
        con.setRequestProperty("Content-Type","multipart/form-data; boundary=" + boundary);
		
		var filesData ='';
		if (files != undefined) {
			for (var prop in files) {
				if (prop === 'filename') {
					existingFileName = files[prop];
					fileparts = existingFileName.split("\\");
					files[prop] = fileparts[fileparts.length-1];
				}
				filesData += prop + '=\"' +  files[prop] + '\"; ';
			}
			filesData = filesData.substring(0, filesData.length-2);
        }	

        if (headers != undefined) {
            for (var prop in headers) {
                con.setRequestProperty(prop ,headers[prop]);
            }
        }

        if (authorization != null) {con.setRequestProperty("Authorization", authorization);}

        var dos = new java.io.DataOutputStream(con.outputStream);
		var buf = Java.type('byte[]');
        dos.writeBytes(twoHyphens + boundary + lineEnd);
        dos.writeBytes("Content-Disposition: form-data; name=\"file\"; " + filesData  + lineEnd);
		// + "\nContent-Type: image/png; charset=Base64" 
        dos.writeBytes(lineEnd);

        // write bytes into form...
		
		buf = readFile(existingFileName);
		var len = buf.length;
		// console.log('buf length: ' + buf.length);
		for (i in buf) {
			dos.write(buf[i].getBytes(), 0, 1);
		}
		// dos.writeBytes(buf);
		
        // send multipart form data necesssary after file data...

        dos.writeBytes(lineEnd);
        dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);
		
        // close streams
        dos.flush();
        dos.close();

        return asResponse(con);

    }
    catch(err) {
        console.log("Error sending file: " + err.message);
    }

}


function httpSendFile(method, theUrl, files,  headers) {
    
    rtn = 1; // return code - 0 if OK
    
	var filesData ='';
	if (files != undefined) {
		for (var prop in files) {
			if (prop === 'filename') {existingFileName = files[prop];}
			filesData += prop + '=\"' +  files[prop] + '\"; ';
		}
		filesData = filesData.substring(0, filesData.length-2);
	}
	
    // fFile2Snd = new File(existingFileName);
    method = method || 'POST';

    lineEnd = "\r\n";
    twoHyphens = "--";
    boundary = "***232404jkg4220957934FW**";

    maxBufferSize = 1 * 1024 * 1024;

    // Post Client request     
    try {
        // fileInputStream = new FileInputStream(new File(existingFileName));
        var con = new java.net.URL(theUrl).openConnection();
        con.doOutput=true;
        con.doInput=true;
        con.useCaches=false;
        con.requestMethod = method;
        
        con.setRequestProperty("Connection", "Keep-Alive");
        con.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);

        if (headers != undefined) {
            for (var prop in headers) {
                con.setRequestProperty(prop ,headers[prop]);
            }
        }

        if (authorization != null) {con.setRequestProperty("Authorization", authorization);}

        var dos = new java.io.DataOutputStream(con.outputStream);

        dos.writeBytes(twoHyphens + boundary + lineEnd);
        dos.writeBytes("Content-Disposition: form-data; name=\"file\"; " + filesData  + "\nContent-Type: image/png" + lineEnd);
		dos.writeBytes(lineEnd);

        rtn++;

        /*
		// create a buffer of maximum size

        bytesAvailable = fileInputStream.available();
        bufferSize = Math.min(bytesAvailable, maxBufferSize);
        buffer = new byte[bufferSize];

        // read file and write it into form...

        bytesRead = fileInputStream.read(buffer, 0, bufferSize);

        while (bytesRead > 0) {
            dos.write(buffer, 0, bufferSize);
            bytesAvailable = fileInputStream.available();
            bufferSize = Math.min(bytesAvailable, maxBufferSize);
            bytesRead = fileInputStream.read(buffer, 0, bufferSize);
        }
		*/
		
		dos.write(readFully(existingFileName));

        // send multipart form data necesssary after file data...

        dos.writeBytes(lineEnd);
        dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);

        // close streams

        // fileInputStream.close();
        dos.flush();
        dos.close();


    }
    catch(err) {
        console.log("Error sending file: " + err.message);
    }

    rtn = 0;
    return rtn;
}




function asResponse(con){
    var d = read(con.inputStream);

    return {data : d, statusCode : con.responseCode};
}

function write(outputStream, data){
    var wr = new java.io.DataOutputStream(outputStream);
    wr.writeBytes(data);
    wr.flush();
    wr.close();
}

function read(inputStream){
    var inReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
    var inputLine;
    var response = new java.lang.StringBuffer();

    while ((inputLine = inReader.readLine()) != null) {
           response.append(inputLine);
    }
    inReader.close();
    return response.toString();
}

function readFully(url) {
    var result = "";
    var imports = new JavaImporter(java.net, java.lang, java.io);

    with (imports) {

        var urlObj = null;

        try {
            urlObj = new URL(url);
        } catch (e) {
            // If the URL cannot be built, assume it is a file path.
            urlObj = new URL(new File(url).toURI().toURL());
        }

        var reader = new BufferedReader(new InputStreamReader(urlObj.openStream()));

        var line = reader.readLine();
        while (line != null) {
            result += line + "\n";
            line = reader.readLine();
        }

        reader.close();
    }

    return result;
}



