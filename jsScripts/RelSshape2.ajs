/*
 * New Archi Script
 *
 * Requires jArchi - https://www.archimatetool.com/blog/2018/07/02/jarchi/
 *
 * This script takes a selection of visual objects as input, filter it to keep only relationships
 * and create S-shape ortho connector
 */

// console.show()
console.clear()
RelSshape2(selection)

function RelSshape2(selection) {
    $(selection).filter("relationship").forEach(function (o) {
        let view = o.view;
        let rel = o.concept;
        let source = o.source;
        let target = o.target;
        sb = source.bounds
        tb = target.bounds

        // calculate the source and target element absolute (x,y) coordinate
        $(source).parents().forEach(function (p) {
            try {
                sb.x += p.bounds.x;
                sb.y += p.bounds.y;
            } catch (e) {
            }
        });

        $(target).parents().forEach(function (p) {
            try {
                tb.x += p.bounds.x;
                tb.y += p.bounds.y;
            } catch (e) {
            }
        });

        // get the distance between source & target object
        dx = tb.x - sb.x
        dy = tb.y - sb.y

        try {
            o.deleteAllBendpoints()
        } catch (e) {
        }
        let bp1 = {};
        let bp2 = {};
        console.log(sb, tb)
        // One object is above the other one, with overlap
        if ((sb.x < tb.x && tb.x < sb.x + sb.width)
            || (tb.x < sb.x && sb.x < tb.x + tb.width)
        ) {
            bp1 = {
                startX: dx / 2,
                startY: -dy / 2,
                endX: -dx / 2,
                endY: 0
            }
            bp2 = {
                startX: dx / 2,
                startY: dy,
                endX: -dx / 2,
                endY: 0
            }

        } else {

            bp1 = {
                startX: 0,
                startY: dy / 2,
                endX: -dx,
                endY: -dy / 2
            }
            bp2 = {
                startX: dx,
                startY: dy / 2,
                endX: 0,
                endY: -dy / 2

            }

        }

        // Add bendpoints at index positions
        try {
            o.addRelativeBendpoint(bp1, 0);
            o.addRelativeBendpoint(bp2, 1);
        } catch (e) {
        }

    });
}